name: scientific
version: 0.3.6.2
id: scientific-0.3.6.2-GVdrvA4ksTcIgShsvqCra6
key: scientific-0.3.6.2-GVdrvA4ksTcIgShsvqCra6
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
author: Bas van Dijk
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    "Data.Scientific" provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    >>> read "1e1000000000" :: Scientific
    1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
abi: 4a339111a07026421ea172b9495c6569
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
import-dirs: /Users/abhiroop/Haskell/polynomial/.cabal-sandbox/lib/x86_64-osx-ghc-8.5.20180708/scientific-0.3.6.2-GVdrvA4ksTcIgShsvqCra6
library-dirs: /Users/abhiroop/Haskell/polynomial/.cabal-sandbox/lib/x86_64-osx-ghc-8.5.20180708/scientific-0.3.6.2-GVdrvA4ksTcIgShsvqCra6
dynamic-library-dirs: /Users/abhiroop/Haskell/polynomial/.cabal-sandbox/lib/x86_64-osx-ghc-8.5.20180708
data-dir: /Users/abhiroop/Haskell/polynomial/.cabal-sandbox/share/x86_64-osx-ghc-8.5.20180708/scientific-0.3.6.2
hs-libraries: HSscientific-0.3.6.2-GVdrvA4ksTcIgShsvqCra6
depends:
    base-4.12.0.0 integer-logarithms-1.0.2.1-2za16tmUkrLLNqjbwaiTQy
    deepseq-1.4.4.0 text-1.2.3.0
    hashable-1.2.7.0-6X6hWCF1nZYEJSGK7WzmHX
    primitive-0.6.3.0-DE5vPG0REvtATbzS2qWSNG containers-0.5.11.0
    binary-0.8.5.1 bytestring-0.10.8.2 integer-gmp-1.0.2.0
abi-depends: base-4.12.0.0=inplace
             integer-logarithms-1.0.2.1-2za16tmUkrLLNqjbwaiTQy=13699799f5aef0503f602ae8b537d2db
             deepseq-1.4.4.0=inplace text-1.2.3.0=inplace
             hashable-1.2.7.0-6X6hWCF1nZYEJSGK7WzmHX=c804898487f21a7886b7609561572c05
             primitive-0.6.3.0-DE5vPG0REvtATbzS2qWSNG=ef26b1b50c92e58b1f50f26f00324f86
             containers-0.5.11.0=inplace binary-0.8.5.1=inplace
             bytestring-0.10.8.2=inplace integer-gmp-1.0.2.0=inplace
haddock-interfaces: /Users/abhiroop/Haskell/polynomial/.cabal-sandbox/share/doc/x86_64-osx-ghc-8.5.20180708/scientific-0.3.6.2/html/scientific.haddock
haddock-html: /Users/abhiroop/Haskell/polynomial/.cabal-sandbox/share/doc/x86_64-osx-ghc-8.5.20180708/scientific-0.3.6.2/html
