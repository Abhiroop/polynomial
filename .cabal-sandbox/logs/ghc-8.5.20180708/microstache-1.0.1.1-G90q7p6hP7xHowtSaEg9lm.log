cabal: Entering directory '/var/folders/dl/rslctfrj4xl50jnzhtlxdfqr0000gn/T/cabal-tmp-29909/microstache-1.0.1.1'
Configuring microstache-1.0.1.1...
Preprocessing library for microstache-1.0.1.1..
Building library for microstache-1.0.1.1..
[1 of 5] Compiling Text.Microstache.Type ( src/Text/Microstache/Type.hs, dist/dist-sandbox-1351b966/build/Text/Microstache/Type.o )

src/Text/Microstache/Type.hs:38:1: warning: [-Wunused-imports]
    The import of ‘Data.Semigroup’ is redundant
      except perhaps to import instances from ‘Data.Semigroup’
    To import instances alone, use: import Data.Semigroup()
   |
38 | import Data.Semigroup
   | ^^^^^^^^^^^^^^^^^^^^^
WARNING: file compiler/simplCore/SimplCore.hs, line 706
  Simplifier bailing out after 4 iterations [2412, 138, 7, 2]
    Size = {terms: 4,010, types: 8,882, coercions: 3,408, joins: 1/67}
WARNING: file compiler/coreSyn/CoreSubst.hs, line 255
  CoreSubst.lookupIdSubst exprIsConApp1
                          subst_expr $fEqPName
  InScope {$dOrd_abq2 w2_ad3r w3_ad3s $fOrdPName}
WARNING: file compiler/coreSyn/CoreSubst.hs, line 255
  CoreSubst.lookupIdSubst exprIsConApp1
                          subst_expr $fEqPName
  InScope {$dOrd_abq2 w2_ad2t w3_ad2u $fOrdPName}
WARNING: file compiler/coreSyn/CoreSubst.hs, line 255
  CoreSubst.lookupIdSubst exprIsConApp1
                          subst_expr $fEqPName
  InScope {$dOrd_abq2 w2_ad2X w3_ad2Y $fOrdPName}
WARNING: file compiler/coreSyn/CoreSubst.hs, line 255
  CoreSubst.lookupIdSubst exprIsConApp1
                          subst_expr $fEqPName
  InScope {$dOrd_abq2 w2_ad1Z w3_ad20 $fOrdPName}
WARNING: file compiler/coreSyn/CoreSubst.hs, line 255
  CoreSubst.lookupIdSubst exprIsConApp1
                          subst_expr $fEqPName
  InScope {$dOrd_abq2 w2_ad1m w3_ad1n $fOrdPName}
WARNING: file compiler/coreSyn/CoreSubst.hs, line 255
  CoreSubst.lookupIdSubst exprIsConApp1
                          subst_expr $fEqPName
  InScope {$dOrd_abq2 w2_ad0J w3_ad0K $fOrdPName}
WARNING: file compiler/simplCore/OccurAnal.hs, line 73
  Glomming in Text.Microstache.Type: [sd7h :->]
WARNING: file compiler/stranal/WorkWrap.hs, line 495
  $cgmapQ_a9h2 2
               [<L,C(C1(U))>]
[2 of 5] Compiling Text.Microstache.Render ( src/Text/Microstache/Render.hs, dist/dist-sandbox-1351b966/build/Text/Microstache/Render.o )
WARNING: file compiler/simplCore/SimplCore.hs, line 706
  Simplifier bailing out after 4 iterations [3484, 327, 37, 11]
    Size = {terms: 1,617, types: 1,399, coercions: 1,090, joins: 2/36}
WARNING: file compiler/simplCore/OccurAnal.hs, line 73
  Glomming in Text.Microstache.Render:
    [sB6B :->, sBbg :->, sBbh :->, sBbi :->, sBbk :->, sBbr :->]
WARNING: file compiler/simplCore/SimplCore.hs, line 706
  Simplifier bailing out after 4 iterations [1871, 424, 48, 1]
    Size = {terms: 3,194, types: 3,856, coercions: 1,962, joins: 4/57}
WARNING: file compiler/simplCore/SimplUtils.hs, line 1523
  Arity decrease: b'_sB4p 3 0 0
  case b'_sB4q of wild_azNy { Text dt_azNB dt1_azNC dt2_azND ->
  let {
    l_azNA :: Int
    [LclId,
     Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
             WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
    l_azNA = I# dt2_azND } in
  case <=# dt2_azND 0# of {
    __DEFAULT ->
      case <=# dt2_azND 128# of {
        __DEFAULT ->
          append
            flush
            ((\ (@ s_azNJ)
                (eta_azNK :: Buffer s_azNJ -> ST s_azNJ [Text])
                (eta1_azNL :: Buffer s_azNJ)
                (s1_azNM :: State# s_azNJ) ->
                case ((eta_azNK eta1_azNL)
                      `cast` (N:ST[0] <s_azNJ>_N <[Text]>_R
                              :: ST s_azNJ [Text] ~R# STRep s_azNJ [Text]))
                       s1_azNM
                of
                { (# ipv_azNS, ipv1_azNT #) ->
                (# ipv_azNS, : @ Text wild_azNy ipv1_azNT #)
                })
             `cast` ((forall (s :: <*>_N).
                      <Buffer s -> ST s [Text]>_R
                      ->_R <Buffer s>_R
                      ->_R Sym (N:ST[0] <s>_N <[Text]>_R)) ; Sym (N:Builder[0])
                     :: (forall s.
                         (Buffer s -> ST s [Text]) -> Buffer s -> STRep s [Text])
                        ~R# Builder));
        1# ->
          writeAtMost
            l_azNA
            ((\ (@ s_azNY)
                (p_azNZ :: MArray s_azNY)
                (o_azO0 :: Int)
                (s1_azO1 :: State# s_azNY) ->
                case o_azO0 of { I# x_azO5 ->
                let {
                  y_azO4 :: Int#
                  [LclId,
                   Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                           WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 1 0}]
                  y_azO4 = +# dt2_azND x_azO5 } in
                case >=# x_azO5 y_azO4 of {
                  __DEFAULT ->
                    case p_azNZ of { MArray ds1_azOc ->
                    case {__pkg_ccall text-1.2.3.0 forall s.
                          MutableByteArray# s
                          -> Word#
                          -> ByteArray#
                          -> Word#
                          -> Word#
                          -> State# RealWorld
                          -> (# State# RealWorld #)}_azOb
                           @ s_azNY
                           ds1_azOc
                           (int2Word# x_azO5)
                           dt_azNB
                           (int2Word# dt1_azNC)
                           (int2Word# (-# y_azO4 x_azO5))
                           (s1_azO1
                            `cast` ((State# (UnsafeCo nominal s_azNY RealWorld))_R
                                    :: State# s_azNY ~R# State# RealWorld))
                    of
                    { (# ds2_azOg #) ->
                    (# ds2_azOg
                       `cast` ((State# (UnsafeCo nominal RealWorld s_azNY))_R
                               :: State# RealWorld ~R# State# s_azNY),
                       l_azNA #)
                    }
                    };
                  1# -> (# s1_azO1, l_azNA #)
                }
                })
             `cast` (forall (s :: <*>_N).
                     <MArray s>_R ->_R <Int>_R ->_R Sym (N:ST[0] <s>_N <Int>_R)
                     :: (forall s. MArray s -> Int -> STRep s Int)
                        ~R# (forall s. MArray s -> Int -> ST s Int)))
      };
    1# ->
      (\ (@ s_azOj)
         (k_azOk :: Buffer s_azOj -> ST s_azOj [Text])
         (buf_azOl :: Buffer s_azOj) ->
         k_azOk buf_azOl)
      `cast` (Sym (N:Builder[0])
              :: (forall s. (Buffer s -> ST s [Text]) -> Buffer s -> ST s [Text])
                 ~R# Builder)
  }
  }
WARNING: file compiler/simplCore/SimplUtils.hs, line 1523
  Arity decrease: lvl_sBdT 3 0 0
  case lvl_sBj6 of wild_azNy { Text dt_azNB dt1_azNC dt2_azND ->
  let {
    l_azNA :: Int
    [LclId,
     Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
             WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
    l_azNA = I# dt2_azND } in
  case <=# dt2_azND 0# of {
    __DEFAULT ->
      case <=# dt2_azND 128# of {
        __DEFAULT ->
          append
            flush
            ((\ (@ s_azNJ)
                (eta_azNK :: Buffer s_azNJ -> ST s_azNJ [Text])
                (eta1_azNL :: Buffer s_azNJ)
                (s1_azNM :: State# s_azNJ) ->
                case ((eta_azNK eta1_azNL)
                      `cast` (N:ST[0] <s_azNJ>_N <[Text]>_R
                              :: ST s_azNJ [Text] ~R# STRep s_azNJ [Text]))
                       s1_azNM
                of
                { (# ipv_azNS, ipv1_azNT #) ->
                (# ipv_azNS, : @ Text wild_azNy ipv1_azNT #)
                })
             `cast` ((forall (s :: <*>_N).
                      <Buffer s -> ST s [Text]>_R
                      ->_R <Buffer s>_R
                      ->_R Sym (N:ST[0] <s>_N <[Text]>_R)) ; Sym (N:Builder[0])
                     :: (forall s.
                         (Buffer s -> ST s [Text]) -> Buffer s -> STRep s [Text])
                        ~R# Builder));
        1# ->
          writeAtMost
            l_azNA
            ((\ (@ s_azNY)
                (p_azNZ :: MArray s_azNY)
                (o_azO0 :: Int)
                (s1_azO1 :: State# s_azNY) ->
                case o_azO0 of { I# x_azO5 ->
                let {
                  y_azO4 :: Int#
                  [LclId,
                   Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                           WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 1 0}]
                  y_azO4 = +# dt2_azND x_azO5 } in
                case >=# x_azO5 y_azO4 of {
                  __DEFAULT ->
                    case p_azNZ of { MArray ds1_azOc ->
                    case {__pkg_ccall text-1.2.3.0 forall s.
                          MutableByteArray# s
                          -> Word#
                          -> ByteArray#
                          -> Word#
                          -> Word#
                          -> State# RealWorld
                          -> (# State# RealWorld #)}_azOb
                           @ s_azNY
                           ds1_azOc
                           (int2Word# x_azO5)
                           dt_azNB
                           (int2Word# dt1_azNC)
                           (int2Word# (-# y_azO4 x_azO5))
                           (s1_azO1
                            `cast` ((State# (UnsafeCo nominal s_azNY RealWorld))_R
                                    :: State# s_azNY ~R# State# RealWorld))
                    of
                    { (# ds2_azOg #) ->
                    (# ds2_azOg
                       `cast` ((State# (UnsafeCo nominal RealWorld s_azNY))_R
                               :: State# RealWorld ~R# State# s_azNY),
                       l_azNA #)
                    }
                    };
                  1# -> (# s1_azO1, l_azNA #)
                }
                })
             `cast` (forall (s :: <*>_N).
                     <MArray s>_R ->_R <Int>_R ->_R Sym (N:ST[0] <s>_N <Int>_R)
                     :: (forall s. MArray s -> Int -> STRep s Int)
                        ~R# (forall s. MArray s -> Int -> ST s Int)))
      };
    1# ->
      (\ (@ s_azOj)
         (k_azOk :: Buffer s_azOj -> ST s_azOj [Text])
         (buf_azOl :: Buffer s_azOj) ->
         k_azOk buf_azOl)
      `cast` (Sym (N:Builder[0])
              :: (forall s. (Buffer s -> ST s [Text]) -> Buffer s -> ST s [Text])
                 ~R# Builder)
  }
  }
[3 of 5] Compiling Text.Microstache.Parser ( src/Text/Microstache/Parser.hs, dist/dist-sandbox-1351b966/build/Text/Microstache/Parser.o )
WARNING: file compiler/simplCore/SimplCore.hs, line 706
  Simplifier bailing out after 4 iterations [5287, 2536, 1296, 282]
    Size = {terms: 4,562, types: 7,138, coercions: 1,054, joins: 0/186}
[4 of 5] Compiling Text.Microstache.Compile ( src/Text/Microstache/Compile.hs, dist/dist-sandbox-1351b966/build/Text/Microstache/Compile.o )
[5 of 5] Compiling Text.Microstache ( src/Text/Microstache.hs, dist/dist-sandbox-1351b966/build/Text/Microstache.o )
[1 of 5] Compiling Text.Microstache.Type ( src/Text/Microstache/Type.hs, dist/dist-sandbox-1351b966/build/Text/Microstache/Type.p_o )

src/Text/Microstache/Type.hs:38:1: warning: [-Wunused-imports]
    The import of ‘Data.Semigroup’ is redundant
      except perhaps to import instances from ‘Data.Semigroup’
    To import instances alone, use: import Data.Semigroup()
   |
38 | import Data.Semigroup
   | ^^^^^^^^^^^^^^^^^^^^^
WARNING: file compiler/simplCore/SimplCore.hs, line 706
  Simplifier bailing out after 4 iterations [2412, 138, 7, 2]
    Size = {terms: 4,010, types: 8,882, coercions: 3,408, joins: 1/67}
WARNING: file compiler/coreSyn/CoreSubst.hs, line 255
  CoreSubst.lookupIdSubst exprIsConApp1
                          subst_expr $fEqPName
  InScope {$dOrd_abq2 w2_ad3r w3_ad3s $fOrdPName}
WARNING: file compiler/coreSyn/CoreSubst.hs, line 255
  CoreSubst.lookupIdSubst exprIsConApp1
                          subst_expr $fEqPName
  InScope {$dOrd_abq2 w2_ad2t w3_ad2u $fOrdPName}
WARNING: file compiler/coreSyn/CoreSubst.hs, line 255
  CoreSubst.lookupIdSubst exprIsConApp1
                          subst_expr $fEqPName
  InScope {$dOrd_abq2 w2_ad2X w3_ad2Y $fOrdPName}
WARNING: file compiler/coreSyn/CoreSubst.hs, line 255
  CoreSubst.lookupIdSubst exprIsConApp1
                          subst_expr $fEqPName
  InScope {$dOrd_abq2 w2_ad1Z w3_ad20 $fOrdPName}
WARNING: file compiler/coreSyn/CoreSubst.hs, line 255
  CoreSubst.lookupIdSubst exprIsConApp1
                          subst_expr $fEqPName
  InScope {$dOrd_abq2 w2_ad1m w3_ad1n $fOrdPName}
WARNING: file compiler/coreSyn/CoreSubst.hs, line 255
  CoreSubst.lookupIdSubst exprIsConApp1
                          subst_expr $fEqPName
  InScope {$dOrd_abq2 w2_ad0J w3_ad0K $fOrdPName}
WARNING: file compiler/simplCore/OccurAnal.hs, line 73
  Glomming in Text.Microstache.Type: [sd7h :->]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_seK3]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_seKr]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_seJE]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_seK3]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_seKr]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_seJE]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_seK3]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_seKr]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_seJE]
WARNING: file compiler/stranal/WorkWrap.hs, line 495
  $cgmapQ_a9h2 2
               [<L,C(C1(U))>]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_seK3]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_seKr]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_seJE]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_seK3]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_seKr]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_seJE]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_seK3]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_seKr]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_seJE]
[2 of 5] Compiling Text.Microstache.Render ( src/Text/Microstache/Render.hs, dist/dist-sandbox-1351b966/build/Text/Microstache/Render.p_o )
WARNING: file compiler/simplCore/SimplCore.hs, line 706
  Simplifier bailing out after 4 iterations [3483, 297, 27, 10]
    Size = {terms: 1,491, types: 1,344, coercions: 1,103, joins: 2/33}
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 73
  Glomming in Text.Microstache.Render:
    [syQQ :->, syVt :->, syVu :->, syVv :->, syVx :->, syVE :->]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/SimplCore.hs, line 706
  Simplifier bailing out after 4 iterations [1826, 434, 47, 1]
    Size = {terms: 3,045, types: 3,746, coercions: 1,966, joins: 4/59}
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/SimplUtils.hs, line 1523
  Arity decrease: b'_syOH 3 0 0
  case b'_syOI of wild_axyk { Text dt_axyn dt1_axyo dt2_axyp ->
  let {
    l_axym :: Int
    [LclId,
     Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
             WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
    l_axym = I# dt2_axyp } in
  case <=# dt2_axyp 0# of {
    __DEFAULT ->
      case <=# dt2_axyp 128# of {
        __DEFAULT ->
          append
            flush
            ((\ (@ s_axyv)
                (eta_axyw :: Buffer s_axyv -> ST s_axyv [Text])
                (eta1_axyx :: Buffer s_axyv)
                (s1_axyy :: State# s_axyv) ->
                case ((eta_axyw eta1_axyx)
                      `cast` (N:ST[0] <s_axyv>_N <[Text]>_R
                              :: ST s_axyv [Text] ~R# STRep s_axyv [Text]))
                       s1_axyy
                of
                { (# ipv_axyE, ipv1_axyF #) ->
                (# ipv_axyE, : @ Text wild_axyk ipv1_axyF #)
                })
             `cast` ((forall (s :: <*>_N).
                      <Buffer s -> ST s [Text]>_R
                      ->_R <Buffer s>_R
                      ->_R Sym (N:ST[0] <s>_N <[Text]>_R)) ; Sym (N:Builder[0])
                     :: (forall s.
                         (Buffer s -> ST s [Text]) -> Buffer s -> STRep s [Text])
                        ~R# Builder));
        1# ->
          writeAtMost
            l_axym
            ((\ (@ s_axyK)
                (p_axyL :: MArray s_axyK)
                (o_axyM :: Int)
                (s1_axyN :: State# s_axyK) ->
                case o_axyM of { I# x_axyR ->
                let {
                  y_axyQ :: Int#
                  [LclId,
                   Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                           WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 1 0}]
                  y_axyQ = +# dt2_axyp x_axyR } in
                case >=# x_axyR y_axyQ of {
                  __DEFAULT ->
                    case p_axyL of { MArray ds1_axyY ->
                    case {__pkg_ccall text-1.2.3.0 forall s.
                          MutableByteArray# s
                          -> Word#
                          -> ByteArray#
                          -> Word#
                          -> Word#
                          -> State# RealWorld
                          -> (# State# RealWorld #)}_axyX
                           @ s_axyK
                           ds1_axyY
                           (int2Word# x_axyR)
                           dt_axyn
                           (int2Word# dt1_axyo)
                           (int2Word# (-# y_axyQ x_axyR))
                           (s1_axyN
                            `cast` ((State# (UnsafeCo nominal s_axyK RealWorld))_R
                                    :: State# s_axyK ~R# State# RealWorld))
                    of
                    { (# ds2_axz2 #) ->
                    (# ds2_axz2
                       `cast` ((State# (UnsafeCo nominal RealWorld s_axyK))_R
                               :: State# RealWorld ~R# State# s_axyK),
                       l_axym #)
                    }
                    };
                  1# -> (# s1_axyN, l_axym #)
                }
                })
             `cast` (forall (s :: <*>_N).
                     <MArray s>_R ->_R <Int>_R ->_R Sym (N:ST[0] <s>_N <Int>_R)
                     :: (forall s. MArray s -> Int -> STRep s Int)
                        ~R# (forall s. MArray s -> Int -> ST s Int)))
      };
    1# ->
      (\ (@ s_axz5)
         (k_axz6 :: Buffer s_axz5 -> ST s_axz5 [Text])
         (buf_axz7 :: Buffer s_axz5) ->
         k_axz6 buf_axz7)
      `cast` (Sym (N:Builder[0])
              :: (forall s. (Buffer s -> ST s [Text]) -> Buffer s -> ST s [Text])
                 ~R# Builder)
  }
  }
WARNING: file compiler/simplCore/SimplUtils.hs, line 1523
  Arity decrease: lvl_syYb 3 0 0
  case lvl_sz3l of wild_axyk { Text dt_axyn dt1_axyo dt2_axyp ->
  let {
    l_axym :: Int
    [LclId,
     Unf=Unf{Src=<vanilla>, TopLvl=False, Value=True, ConLike=True,
             WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
    l_axym = I# dt2_axyp } in
  case <=# dt2_axyp 0# of {
    __DEFAULT ->
      case <=# dt2_axyp 128# of {
        __DEFAULT ->
          append
            flush
            ((\ (@ s_axyv)
                (eta_axyw :: Buffer s_axyv -> ST s_axyv [Text])
                (eta1_axyx :: Buffer s_axyv)
                (s1_axyy :: State# s_axyv) ->
                case ((eta_axyw eta1_axyx)
                      `cast` (N:ST[0] <s_axyv>_N <[Text]>_R
                              :: ST s_axyv [Text] ~R# STRep s_axyv [Text]))
                       s1_axyy
                of
                { (# ipv_axyE, ipv1_axyF #) ->
                (# ipv_axyE, : @ Text wild_axyk ipv1_axyF #)
                })
             `cast` ((forall (s :: <*>_N).
                      <Buffer s -> ST s [Text]>_R
                      ->_R <Buffer s>_R
                      ->_R Sym (N:ST[0] <s>_N <[Text]>_R)) ; Sym (N:Builder[0])
                     :: (forall s.
                         (Buffer s -> ST s [Text]) -> Buffer s -> STRep s [Text])
                        ~R# Builder));
        1# ->
          writeAtMost
            l_axym
            ((\ (@ s_axyK)
                (p_axyL :: MArray s_axyK)
                (o_axyM :: Int)
                (s1_axyN :: State# s_axyK) ->
                case o_axyM of { I# x_axyR ->
                let {
                  y_axyQ :: Int#
                  [LclId,
                   Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                           WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 1 0}]
                  y_axyQ = +# dt2_axyp x_axyR } in
                case >=# x_axyR y_axyQ of {
                  __DEFAULT ->
                    case p_axyL of { MArray ds1_axyY ->
                    case {__pkg_ccall text-1.2.3.0 forall s.
                          MutableByteArray# s
                          -> Word#
                          -> ByteArray#
                          -> Word#
                          -> Word#
                          -> State# RealWorld
                          -> (# State# RealWorld #)}_axyX
                           @ s_axyK
                           ds1_axyY
                           (int2Word# x_axyR)
                           dt_axyn
                           (int2Word# dt1_axyo)
                           (int2Word# (-# y_axyQ x_axyR))
                           (s1_axyN
                            `cast` ((State# (UnsafeCo nominal s_axyK RealWorld))_R
                                    :: State# s_axyK ~R# State# RealWorld))
                    of
                    { (# ds2_axz2 #) ->
                    (# ds2_axz2
                       `cast` ((State# (UnsafeCo nominal RealWorld s_axyK))_R
                               :: State# RealWorld ~R# State# s_axyK),
                       l_axym #)
                    }
                    };
                  1# -> (# s1_axyN, l_axym #)
                }
                })
             `cast` (forall (s :: <*>_N).
                     <MArray s>_R ->_R <Int>_R ->_R Sym (N:ST[0] <s>_N <Int>_R)
                     :: (forall s. MArray s -> Int -> STRep s Int)
                        ~R# (forall s. MArray s -> Int -> ST s Int)))
      };
    1# ->
      (\ (@ s_axz5)
         (k_axz6 :: Buffer s_axz5 -> ST s_axz5 [Text])
         (buf_axz7 :: Buffer s_axz5) ->
         k_axz6 buf_axz7)
      `cast` (Sym (N:Builder[0])
              :: (forall s. (Buffer s -> ST s [Text]) -> Buffer s -> ST s [Text])
                 ~R# Builder)
  }
  }
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j_sz34]
WARNING: file compiler/simplCore/OccurAnal.hs, line 2714
  OccurAnal failed to rediscover join point(s): [$j2_sGOD]
[3 of 5] Compiling Text.Microstache.Parser ( src/Text/Microstache/Parser.hs, dist/dist-sandbox-1351b966/build/Text/Microstache/Parser.p_o )
WARNING: file compiler/simplCore/SimplCore.hs, line 706
  Simplifier bailing out after 4 iterations [5286, 2536, 1296, 282]
    Size = {terms: 4,560, types: 7,131, coercions: 1,054, joins: 0/191}
[4 of 5] Compiling Text.Microstache.Compile ( src/Text/Microstache/Compile.hs, dist/dist-sandbox-1351b966/build/Text/Microstache/Compile.p_o )
[5 of 5] Compiling Text.Microstache ( src/Text/Microstache.hs, dist/dist-sandbox-1351b966/build/Text/Microstache.p_o )
cabal: Haddock's internal GHC version must match the configured GHC version.
The GHC version is 8.5.20180708 but haddock is using GHC version 7.10.3
Installing library in /Users/abhiroop/Haskell/polynomial/.cabal-sandbox/lib/x86_64-osx-ghc-8.5.20180708/microstache-1.0.1.1-G90q7p6hP7xHowtSaEg9lm
cabal: Leaving directory '/var/folders/dl/rslctfrj4xl50jnzhtlxdfqr0000gn/T/cabal-tmp-29909/microstache-1.0.1.1'
